const fs = require('fs');
const total = 1000000; // T·ªïng s·ªë l∆∞·ª£ng m√£ c·∫ßn t·∫°o
const perFile = 1000; // S·ªë l∆∞·ª£ng m√£ m·ªói file
const fileCount = total / perFile;
const path = `./coupon_kfc_pos_number-e2e-${total}-rows`;

if (!fs.existsSync(path)) {
  fs.mkdirSync(path, { recursive: true });
  console.log(`üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: ${path}`);
}

function generateRandom13Digits() {
  // T·∫°o m·ªôt chu·ªói 13 ch·ªØ s·ªë, ƒë·∫£m b·∫£o kh√¥ng b·ªã thi·∫øu s·ªë 0 ·ªü ƒë·∫ßu
  return String(Math.floor(Math.random() * 1e13)).padStart(13, '0');
}

function generateUniqueUnitCodes(count, existingCodes) {
  const codes = new Set();
  while (codes.size < count) {
    const code = `A${generateRandom13Digits()}C`.trim();
    if (!existingCodes.has(code)) {
      codes.add(code);
      existingCodes.add(code);
    }
  }
  return Array.from(codes);
}

const allCodes = new Set();

for (let i = 1; i <= fileCount; i++) {
  const unitCodes = generateUniqueUnitCodes(perFile, allCodes);
  // create folder 
  
  const fileName = `${path}/unit_codes_total_${total}_${i}.csv`;
  fs.writeFileSync(fileName, unitCodes.join('\n'), 'utf8');
  console.log(`‚úÖ ƒê√£ t·∫°o xong file ${fileName} ch·ª©a ${perFile} m√£ kh√¥ng tr√πng.`);
}

console.log(`üéâ ƒê√£ t·∫°o t·ªïng c·ªông ${total} m√£, chia th√†nh ${fileCount} file CSV.`);