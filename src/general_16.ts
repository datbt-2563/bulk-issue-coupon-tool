import * as fs from "fs";
import * as path from "path";

// H√†m ki·ªÉm tra ƒëi·ªÅu ki·ªán m√£: ph·∫£i l√† 16 ch·ªØ s·ªë
function isValidCode(code: string): boolean {
  return /^[0-9]{16}$/.test(code);
}

// H√†m t·∫°o m√£ ng·∫´u nhi√™n
function generateCode(): string {
  return String(Math.floor(Math.random() * 1e16)).padStart(16, "0");
}

function generateUniqueCodes(totalCodes: number): string {
  const codesPerFile: number = 1000; // S·ªë m√£ m·ªói file
  const fileCount: number = totalCodes / codesPerFile; // T·ªïng s·ªë file
  const allCodes: Set<string> = new Set(); // T·∫≠p h·ª£p ƒë·ªÉ l∆∞u m√£ duy nh·∫•t

  // Ensure output directory exists
  const outputDir: string = "output";
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  const targetDir: string = path.join(
    outputDir,
    `general_number-e2e-${totalCodes}-rows`
  );

  // T·∫°o m√£ duy nh·∫•t
  while (allCodes.size < totalCodes) {
    const code: string = generateCode();
    if (isValidCode(code) && !allCodes.has(code)) {
      allCodes.add(code);
    }
  }

  // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!fs.existsSync(targetDir)) {
    fs.mkdirSync(targetDir, { recursive: true });
    console.log(`üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: ${targetDir}`);
  }

  // Ghi m√£ v√†o c√°c file CSV
  const allCodesArray: string[] = Array.from(allCodes);
  for (let i = 0; i < fileCount; i++) {
    const start: number = i * codesPerFile;
    const end: number = start + codesPerFile;
    const batch: string[] = allCodesArray.slice(start, end);
    const fileName: string = path.join(targetDir, `codes_${i + 1}.csv`);

    fs.writeFileSync(fileName, batch.join("\n"), "utf8");
    console.log(`‚úÖ ƒê√£ t·∫°o file ${fileName} v·ªõi ${batch.length} m√£.`);
  }

  console.log(
    `üéâ ƒê√£ t·∫°o t·ªïng c·ªông ${totalCodes} m√£, chia th√†nh ${fileCount} file CSV.`
  );

  return targetDir;
}

export default function generate(totalCodes: number = 100000): string {
  console.log(`üöÄ B·∫Øt ƒë·∫ßu t·∫°o ${totalCodes} m√£ 16 ch·ªØ s·ªë...`);
  const outputPath = generateUniqueCodes(totalCodes);
  console.log(`üéâ Ho√†n th√†nh! Files ƒë∆∞·ª£c l∆∞u t·∫°i: ${outputPath}`);
  return outputPath;
}

// Run directly if this file is executed
if (require.main === module) {
  generate();
}
